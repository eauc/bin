Rebasing
========

git rebase [-i] --onto <new_branch> <upstream> <branch>

    rebase commits included in <upstream>..<branch> on <new_branch>
    -i for interactive mode

    if <branch> omitted -> current branch
    if <upstream> omitted -> <branch>'s base commit
    if <new_branch> omitted -> <branch>'s mother branch's tip

    exple :
          A---B---C topic = <branch>
         /
    D---E---F---G master = <new_branch>
         \
          = <upstream>

git rebase master
    rebase master..current-branch on master's tip

git rebase master topic
    rebase master..topic on master's tip
    (will checkout topic first)

git rebase --onto master topicA topicB
    rebase <topicA/topicB merge ancestor>..topicB on master's tip

git rebase -i <after-this-commit>
    rewrite commit history since <after-this-commit>

In case of merge failure
------------------------

    Don't panic

git add <file>
    update file after correcting merge conflicts
git rebase --continue
    continue rebase after all merge conflicts have been resolved
git rebase --skip
    skip current commit and continue rebase 
git rebase --abort
    abort rebase

Interactive Mode
----------------

pick deadbee The oneline of this commit
pick fa1afe1 The oneline of the next commit
    you can reorder the commit lines

pick deadbee The oneline of this commit
squash fa1afe1 The oneline of the next commit
    merge both commits, commit msg is the sum of both commit msgs

pick deadbee The oneline of this commit
fixup fa1afe1 The oneline of the next commit
    merge both commits, commit msg = first commit msg

reword deadbee The oneline of this commit
    rewrite commit msg

edit deadbee The oneline of this commit
    rebase stops after this commit, allowing to amend
    then use rebase --continue

Splitting commits
-----------------

git rebase -i <commit>^
    start an interactive rebase, where <commit> is the commit you want to split.
    in fact, any commit range will do, as long as it contains that commit.

edit <commit> <commit_msg>
    mark the commit you want to split with the action "edit".

git reset HEAD^
    when rebase stop on <commit>
    the HEAD is rewound by one, and the index follows suit. 
    the working tree stays the same.

git add -i
    add the changes to the index that you want to have in the new commit

[git stash]
    clean reaming modifications in working tree and test your new commit

git commit
    create new commit
    repeat last 3 steps

git rebase --continue
    continue rebase

Recovering from upstream rebase
-------------------------------

git help rebase
    last section
